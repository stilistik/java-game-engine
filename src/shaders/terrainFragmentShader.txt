#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;

out vec4 out_color;

uniform sampler2D backgroundTexture;
uniform sampler2D rTexture;
uniform sampler2D gTexture;
uniform sampler2D bTexture;
uniform sampler2D blendMap;


uniform vec3 lightColor;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;

void main(void){

	vec4 blendMapColor = texture(blendMap, pass_textureCoords);
	float backgroundAmount = 1 - (blendMapColor.r + blendMapColor.g + blendMapColor.b);
	vec2 tiledTexCoords = pass_textureCoords * 40.0;
	vec4 backgroundTextureColor = texture(backgroundTexture, tiledTexCoords) * backgroundAmount;
	vec4 rTextureColor = texture(rTexture, tiledTexCoords) * blendMapColor.r;
	vec4 gTextureColor = texture(gTexture, tiledTexCoords) * blendMapColor.g;
	vec4 bTextureColor = texture(bTexture, tiledTexCoords) * blendMapColor.b;
	vec4 totalColor = backgroundTextureColor + rTextureColor + gTextureColor + bTextureColor;
	

	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	float nDotL = dot(unitNormal, unitLightVector);
	float brightness = max(nDotL, 0.2);
	vec3 diffuse = brightness * lightColor;
	
	vec3 unitToCameraVector = normalize(toCameraVector);
	vec3 lightDirection = -unitLightVector;
	vec3 reflectedDirection = reflect(lightDirection, unitNormal);
	float specularFactor = dot(reflectedDirection, unitToCameraVector);
	specularFactor = max(specularFactor, 0.0);
	float dampedFactor = pow(specularFactor, shineDamper);
	vec3 finalSpecular = dampedFactor * lightColor;
	
	out_color = vec4(diffuse, 1.0) * totalColor + vec4(finalSpecular, 1.0);
	out_color = mix(vec4(skyColor, 1.0), out_color, visibility);
	
}