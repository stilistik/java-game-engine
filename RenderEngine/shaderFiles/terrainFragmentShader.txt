#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector[6];
in vec3 toCameraVector;
in float visibility;

out vec4 out_color;

uniform int nTextures;
uniform sampler2D textures[8];
uniform sampler2D textureMaps[8];


uniform vec3 lightColor[6];
uniform vec3 lightAttenuation[6];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColor;

void main(void){

	vec2 tiledTexCoords = pass_textureCoords * 40.0;
	vec4 totalColor = vec4(0.0);
	
	for (int i = 0; i < nTextures; i++){
		vec4 mapColor = texture(textureMaps[i], pass_textureCoords);
		float amount = mapColor.r;
		vec4 color = texture(textures[i], tiledTexCoords) * amount;
		totalColor = totalColor + color;
	}

	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitToCameraVector = normalize(toCameraVector);
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	for (int i = 0; i < 6; i++){
		float distance = length(toLightVector[i]);
		float attenuationFactor = lightAttenuation[i].x + lightAttenuation[i].y * distance + lightAttenuation[i].z * distance * distance;
		vec3 unitLightVector = normalize(toLightVector[i]);
		float nDotL = dot(unitNormal, unitLightVector);
		float brightness = max(nDotL, 0.0);
		vec3 lightDirection = -unitLightVector;
		vec3 reflectedDirection = reflect(lightDirection, unitNormal);
		float specularFactor = dot(reflectedDirection, unitToCameraVector);
		specularFactor = max(specularFactor, 0.0);
		float dampedFactor = pow(specularFactor, shineDamper);
		vec3 diffuse = (brightness * lightColor[i]) / attenuationFactor;
		vec3 specular = (dampedFactor * reflectivity * lightColor[i]) / attenuationFactor;
		totalDiffuse = totalDiffuse + diffuse;
		totalSpecular = totalSpecular + specular;
	}
	totalDiffuse = max(totalDiffuse, 0.2);
	
	out_color = vec4(totalDiffuse, 1.0) * totalColor + vec4(totalSpecular, 1.0);
	out_color = mix(vec4(skyColor, 1.0), out_color, visibility);
	
}