#version 400 core

const int MAX_LIGHTS = 20;

in vec3 position;
in vec2 textureCoords;
in vec3 normal;

out vec2 pass_textureCoords;
out vec3 surfaceNormal;
out vec3 toLightVector[20];
out vec3 toCameraVector;
out float visibility;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;

uniform vec3 lightPosition[MAX_LIGHTS];
uniform float useFakeLighting;

uniform float atlasDimension;
uniform vec2 atlasOffsets;

const float density = 0.0035;
const float gradient = 5.0;



void main(void){
	
	vec4 worldPosition = transformationMatrix * vec4(position, 1.0);
	vec4 camPosition = viewMatrix * worldPosition;
	gl_Position = projectionMatrix * camPosition;
	pass_textureCoords = (textureCoords / atlasDimension) + atlasOffsets;
	
	vec3 actualNormal = normal;
	if (useFakeLighting > 0.5){
		actualNormal = vec3(0.0, 1.0, 0.0);
	}	
	
	surfaceNormal = (transformationMatrix * vec4(actualNormal, 0.0)).xyz;
	for (int i = 0; i < MAX_LIGHTS; i++){
		toLightVector[i] = lightPosition[i] - worldPosition.xyz;
	}
	toCameraVector = (inverse(viewMatrix) * vec4(0.0, 0.0, 0.0, 1.0)).xyz - worldPosition.xyz;
	
	float distance = length(camPosition.xyz);
	visibility = exp(-pow((distance * density), gradient));
	visibility = clamp(visibility, 0.0, 1.0);

}